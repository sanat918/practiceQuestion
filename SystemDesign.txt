SystemDesign
 =====================
 ThinClient- It is a light weight computer where processing will happen at server end.(VDI machines)
 ThickClient- It is a computer that perform most of the operation locally using its own resources.(ex: videoEditor, gaming Software)   Forward-Proxy: it sits client side and server does not know about the client from where its requesting.
 ex:- VPN , Anonymity, blocking content

 Reverse-Proxy: - it sits server side and client can interact with multiple server but didn't know the exact address.
 ex:- load balnacer, caching, SSL- termination  
 
 Monolithic Archietecture:-
 --------------------------
  if a all the components and functionalities of a project are entangled and combined in a single codebase then that is a monolithic archietecture.
  -its less complex, 
  -high productivity, 
  -easy to understand.

 Distributed System:- 
 ------------------------
 It's a collection of multiple individual suystem connected through a network that shares resources, communicate and
- coordinate to archieve common goal.
- latency=computational Delay + Network Delay

Network Latency:-
------------------
Req time + computation time + response time 

Monolithic archietecture has less network latency as all resources are available or hosted over same server. Distributed archietecture have more network latency as resources are available in the different servers.

Methods used to minimise Network latency
-----------------------------------------
CDN - content delivery network
------------------------------
-It is used as we are requesting from india and data is available in US server to it will take time so instead of this we can setup one server in india and minimise the network latency.

Caching
---------
let suppose one we have a function after excuting 1000 line its giving value which we require so instead of again executing it we save computed value and whenever we get a request we get this saved value(we call these variable Caching Keys).
Types:- Inmemory(stored in ram) ex:- Memcached, external or distributed(stored in different nodes) EX:- Redis

when to use Caching
---------------------
1. when we have read intensive task.(newspaper app)
2. static content.

Cache Eviction stretogies
-------------------------
LRU(least recently used), MRU(most recently used), FIFO, LIFO, RR 

Throughput
----------
Throughput is a measure of how many units of information a system can process in a given amount of time. 
It is measured in BPS(Bits per second). Distributed has more Throughput as it has more resources and can process more task separately at a same time.

causes of low Throughput
-------------------------
network latency, protocol overhead, conjestion(too many requests as a same time)

how to improve
---------------
CDN, caching, distributed system, 

LoadBalncer
-----------
it distributes the request to the resources in a round robin fashion.

Redundency VS replication(Redundency + Synchronization)
----------------------------
In Redundency we make a copy of node but data is not syncing with other node where as in replication we make a copy but data sycing is also happening at the same time.


Consistency
-------------
Suppose we have a booking platform one client is booking ticket from the pune location and he booked that ticket same time another client booking the same same seat so make the system consistent we need to commit the changes in the DB as soon as possible.

types of Consistency
---------------------
1. Strong Consistency-
   It doesn't allow read operation until nodes with replicated data updated.

2. Eventually Consistency-
   User Read requests are not halted till all the replicas are updated rather the update process is eventual. Some users might receive old data but eventuall all the data is updatea to the latest data.

3. Weak Consistency-
    Here its not neccessary to update all nodes, depends on the bussiness requirement.

how to improve consistent
--------------------------
Improve network bandwidth
Stop reading ops
Replication based on distance 

CAP Theoram
------------
if we are disgning a distributed system only two things from all three(Consistency,Availablity and Partition Tolerance) will be archieved at a time.

P is important in each and every case in all Applications.So it can be PA or PC

Vertical Scaling
-----------------
In the same machine we are upgrading its hardware.

Horizontal Scaling
----------------------
Adding more machines as users are increasing.

Redundancy
----------
Redundancy is simply the duplication of nodes or components so that when a node or component fails, the duplicate node is available to service customers. 

1.Active Redundancy
--------------------
Active Redundancy is considered when each unit is operating/active and responding to the action. Multiple nodes are connected to a load balancer, and each unit receives an equal load.

2. Passive Redundancy
---------------------
Passive Redundancy is considered when one node is active or operational and the other is not operating. During the breakdown of the active node, the Daccive node maintains availabilitu bu becoming the active node.


Load balnacer
---------------
Load Balancing is the process of efficient distribution of network traffic across all nodes in a distributed system.

**Roles of Load Balancer**
1. The load distribution is equal over every node.
2. Health check lif the node is not operational, the request is passed to another node that is up and running.
3. Load balancers ensure high scalability, high throughput and high availability.

**Load Balancing Algorithms**
1. Round Robin (Static) - rotation fashion.
2. Weighted Roud robin (Static) - It is similar to the Round Robin when the servers are of differen capacities. ( some node can have better resourcs, others might not have )
3. IP Hash Algorithm (Static) - The servers have almost equal capacity, and the hash function ( input is source IP) is used for random or unbiased distribution of requests to the nodes.
4. Source IP Hash (Static) - Source IP Hash combines the server and client's source and destination IP addresses to produce a hash key. The key can be used to determine the
request distribution.
5. Least Connection Algorithm ( Dynamic) - Client requests are distributed to the application server with the least number of active connections at the time the client request is receivea.
6. Least Response Time (Dynamic) - The request is distributed based on the server which has the lenct ressance time

Polyglot Persistence
--------------------
When we use multiple databses to fulfill our requirement.

Indexing
----------
We apply Indexing where we perform more read intensive tasks and its use B-tree data structure.It make a lookup table and find the desired value corresponds to the row.

Synchronous Communication
-------------------------
Here we can only perform one task at a time.
ex:- transaction

WebServers
-----------
At the most basic level, whenever a browser needs a file that is hosted on a web server, the browser requests the file via HTTP. When the request reaches the correct (hardware) web server, the (software) HTTP server accepts the request, finds the requested document, and sends it back to the browser, also through HTTP. (If the server doesn't find the requested document, it returns a 404 response instead.)
EX:- Apache server, nginx

Communication protocol in computer Networks
--------------------------------------------
Models
1. Push - A push model in communication is a one-way communication style where the sender initiates the ransmission of information to the receiver without waiting for a response
2. Pull / Polling - In this client request server respond.
3. Long Polling - Client requests, server keep it open until it gives response.(ex:- like 100 client request for the resource but only 20 are available so first 20 get the resource but until remaining 80 get resource so server keep these remaining requests open)
4. Socket - 
5. Server sent events -Ex - Cricbuzz Client subscribes to the server "strean and the server will send a message("stream of events") to the client until server or client closes the stream.
One way connection
Long-Lived Connection


SOA(service oriented architecture) and Microservices
---------------------
SOA
-----
Services can share data storage
Less scalable architecture
Deployment is time-consuming
Focused on maximizes application
service reusability

Microservices
----------------------
Each microservice has separate and independt of platse seekingge
Highly scalable archietechture
deployment is easy and less time taken
More focus fier architecture

Tier Archietecture
------------------
A web application can be designed according to the n-tier architecture where tiers are different layers of
architecture.A tier is a logical separation between different components of the application. Tier architecture helps make modifications and updation of different components easy. It helps in assigning dedicated tasks and roles to each component.








